# Encoding: utf-8
#
# Application: Agile Software Factory
# Component: Main
#
# Copyright (c) 2014 Grid Dynamics International, Inc. All Rights Reserved
# Classification level: Public
# Licensed under the Apache License, Version 2.0.
#
# All hope abandon ye who enter here
#

application:
  configuration:
    input.cookbooks_url: "http://gd-asf.s3.amazonaws.com/cookbooks.tar.gz"
    input.gerrit_version: "2.9.1"
    input.jira_version: "6.1.5"
    input.sonar_version: "4.5.1"
    input.selenium_version: "2.44.0"
    input.selenium_node_count: "1"
    input.storage_size: 10
  bindings:
      - [integration.workflow, gerrit]
      - [integration.workflow, jenkins]
      - [integration.workflow, ldap]
      - [integration.workflow, selenium]
      - [integration.workflow, sonar]
      - [integration.workflow, jira]
      - [integration.workflow, nexus]
      - [integration.workflow, props]
      - [integration.workflow, docker-vm]
      - [integration.workflow, docker-registry]
      - [docker-registry, docker-vm]
  interfaces:
    input:
      jira_version: "bind(jira#input.jira_version)"
      gerrit_version: "bind(gerrit#input.gerrit_version)"
      sonar_version: "bind(sonar#input.sonar_version)"
      selenium_version: "bind(selenium#conf.selenium-version)"
      selenium_node_count: "bind(selenium#conf.slave-node-count)"
      storage_size: |
        bind(
          gerrit#input.storage_size,
          jenkins#input.storage_size,
          ldap#input.storage_size,
          sonar#input.storage_size,
          jira#input.storage_size,
          nexus#input.storage_size,
          docker-vm#input.storage_size)
      cookbooks_url: |
        bind(
          gerrit#input.cookbooks_url,
          jenkins#input.cookbooks_url,
          ldap#input.cookbooks_url,
          sonar#input.cookbooks_url,
          jira#input.cookbooks_url,
          nexus#input.cookbooks_url,
          integration.workflow#input.cookbooks_url)
    endpoints:
      ldapadmin: "bind(ldap#output.ldapadmin_endpoint)"
      gerrit: "bind(gerrit#output.gerrit_endpoint)"
      jenkins: "bind(jenkins#output.jenkins_endpoint)"
      ldap: "bind(ldap#output.ldap_endpoint)"
      sonar: "bind(sonar#output.sonar_endpoint)"
      jira: "bind(jira#output.jira_endpoint)"
      nexus: "bind(nexus#output.nexus_endpoint)"
      selenium_console: "bind(selenium#endpoints.console-url)"
      selenium_webdriver: "bind(selenium#endpoints.remote-url)"
      dashboard: "bind(integration.workflow#result.dashboard)"
      docker: "bind(docker-vm#result.docker_endpoints)"
    servers:
      gerrit_host: "bind(gerrit#output.gerrit_public_ips)"
      jenkins_host: "bind(jenkins#output.jenkins_public_ips)"
      ldap_host: "bind(ldap#output.ldap_public_ips)"
      sonar_host: "bind(sonar#output.sonar_public_ips)"
      jira_host: "bind(jira#output.jira_public_ips)"
      nexus_host: "bind(nexus#output.nexus_public_ips)"
      selenium_hub_host: "bind(selenium#hosts.hub)"
      selenium_node_hosts: "bind(selenium#hosts.nodes)"
      docker: "bind(docker-vm#result.docker-vm_public_ips)"

  components:
    props:
      type: reference.Service
      interfaces:
        properties:
          qubell_app_id: "publish-signal(string)"
          qubell_env_id: "publish-signal(string)"
          qubell_username: "publish-signal(string)"
          qubell_password: "publish-signal(string)"
          jira_username: "publish-signal(string)"
          jira_password: "publish-signal(string)"
          jenkins_sonar_username: "publish-signal(string)"
          jenkins_sonar_password: "publish-signal(string)"
          admin_sonar_username: "publish-signal(string)"
          admin_sonar_password: "publish-signal(string)"
          amazon_access_id: "publish-signal(string)"
          amazon_secret_key: "publish-signal(string)"
          amazon_region: "publish-signal(string)"
          amazon_instance_ami: "publish-signal(string)"
          amazon_instance_cap: "publish-signal(string)"
          amazon_instance_security_groups: "publish-signal(string)"
          amazon_instance_type: "publish-signal(string)"
          amazon_instance_zone: "publish-signal(string)"

    sonar:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Sonar"
      interfaces:
        input:
          storage_size:
            type: configuration(int)
            name: Storage size
          sonar_version:
            type: configuration(string)
            name: Sonar version
          cookbooks_url:
            type: configuration(string)
            name: Cookbooks tarball URL
        output:
          sonar_public_ips:
            type: publish-signal(list<string>)
            name: Sonar
          sonar_private_ips:
            type: publish-signal(list<string>)
            name: Sonar
          sonar_endpoint:
            type: publish-signal(list<string>)
            name: Sonar

    gerrit:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Gerrit"
      interfaces:
        input:
          storage_size:
            type: configuration(int)
            name: Storage size
          gerrit_version:
            type: configuration(string)
            name: Gerrit version
          cookbooks_url:
            type: configuration(string)
            name: Cookbooks tarball URL
        output:
          gerrit_public_ips:
            type: publish-signal(list<string>)
            name: Gerrit
          gerrit_endpoint:
            type: publish-signal(string)
            name: Gerrit

    jenkins:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Jenkins"
      interfaces:
        input:
          storage_size:
            type: configuration(int)
            name: Storage size
          cookbooks_url:
            type: configuration(string)
            name: Cookbooks tarball URL
        output:
          jenkins_public_ips:
            type: publish-signal(list<string>)
            name: Jenkins
          jenkins_endpoint:
            type: publish-signal(string)
            name: Jenkins

    jira:
      type: reference.Submodule
      configuration:
        __locator.application-id: "JIRA"
      interfaces:
        input:
          storage_size:
            type: configuration(int)
            name: Storage size
          jira_version:
            type: configuration(string)
            name: JIRA version
          cookbooks_url:
            type: configuration(string)
            name: Cookbooks tarball URL
        output:
          jira_public_ips:
            type: publish-signal(list<string>)
            name: JIRA
          jira_endpoint:
            type: publish-signal(string)
            name: JIRA

    ldap:
      type: reference.Submodule
      configuration:
        __locator.application-id: "OpenLDAP"
      interfaces:
        input:
          storage_size:
            type: configuration(int)
            name: Storage size
          cookbooks_url:
            type: configuration(string)
            name: Cookbooks tarball URL
        output:
          ldap_public_ips:
            type: publish-signal(list<string>)
            name: LDAP
          ldap_private_ips:
            type: publish-signal(list<string>)
            name: LDAP
          ldap_endpoint:
            type: publish-signal(list<string>)
            name: LDAP
          ldapadmin_endpoint:
            type: publish-signal(list<string>)
            name: LDAP Admin

    nexus:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Nexus"
      interfaces:
        input:
          storage_size:
            type: configuration(int)
            name: Storage size
          cookbooks_url:
            type: configuration(string)
            name: Cookbooks tarball URL
        output:
          nexus_public_ips:
            type: publish-signal(list<string>)
            name: Nexus
          nexus_endpoint:
            type: publish-signal(string)
            name: Nexus

    selenium:
      type: reference.Submodule
      configuration:
        __locator.application-id: "SeleniumGrid"
      interfaces:
        conf:
          selenium-version:
            type: configuration(string)
            name: SeleniumGrid version
          slave-node-count:
            type: configuration(string)
            name: SeleniumGrid node count
          recipes:
            type: configuration(string)
            name: "SeleniumGrid recipes"
        endpoints:
          console-url:
            type: publish-signal(string)
            name: SeleniumGrid Console
          remote-url:
            type: publish-signal(string)
            name: SeleniumGrid WebDriver
        hosts:
          hub:
            type: publish-signal(string)
            name: SeleniumGrid Hub
          nodes:
            type: publish-signal(list<string>)
            name: SeleniumGrid Nodes
        actions:
          scale:
            type: receive-command(int node-count => list<string> node-hosts)
            name: "Scale up SeleniumGrid"
          re-start:
            type: receive-command()
            name: "Restart SeleniumGrid"
          change-version:
            type: receive-command(string selenium-version)
            name: "Change SeleniumGrid version"

    docker-registry:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Docker Registry"
      interfaces:
        input:
          storage_size:
            type: "configuration(int)"
            name: "Storage size"
          cookbooks_url:
            type: configuration(string)
            name: Cookbooks tarball URL
        result:
          docker_registry_ip:
            type: "publish-signal(string)"
            name: "Docker Registry IP"
          docker_registry_private_ip:
            type: "publish-signal(string)"
            name: "Docker Registry Private IP"
          docker_registry_endpoint:
            type: "publish-signal(string)"
            name: "Docker Registry Endpoints"

    docker-vm:
      type: reference.Submodule
      configuration:
        __locator.application-id: "DockerVM"
      required:
        - docker-registry
      interfaces:
        input:
          storage_size:
            type: "configuration(int)"
            name: "Storage size"
        result:
          docker-vm_public_ips:
            type: "publish-signal(list<string>)"
            name: "Docker IP"
          docker_endpoints:
            type: "publish-signal(list<string>)"
            name: "Docker Endpoints"
        docker-vm-actions:
          registrate_pubkey:
            type: "receive-command(string pubkey, string user)"
            name: "Add Public Key"
        docker-registry:
          docker_registry_ip: "consume-signal(string)"
          docker_registry_private_ip: "consume-signal(string)"
          docker_registry_endpoint: "consume-signal(string)"

    integration:
      components:
        workflow:
          type: workflow.Instance
          interfaces:
            input:
              cookbooks_url:
                type: configuration(string)
                name: Cookbooks tarball URL
            properties:
              qubell_app_id: consume-signal(string)
              qubell_env_id: consume-signal(string)
              qubell_username: consume-signal(string)
              qubell_password: consume-signal(string)
              jira_username: consume-signal(string)
              jira_password: consume-signal(string)
              jenkins_sonar_username: consume-signal(string)
              jenkins_sonar_password: consume-signal(string)
              admin_sonar_username: consume-signal(string)
              admin_sonar_password: consume-signal(string)
              amazon_access_id: consume-signal(string)
              amazon_secret_key: consume-signal(string)
              amazon_region: consume-signal(string)
              amazon_instance_ami: consume-signal(string)
              amazon_instance_cap: consume-signal(string)
              amazon_instance_security_groups: consume-signal(string)
              amazon_instance_type: consume-signal(string)
              amazon_instance_zone: consume-signal(string)
            docker-vm:
              docker-vm_public_ips: consume-signal(list<string>)
              docker_endpoints: consume-signal(list<string>)
            docker-vm-actions:
              registrate_pubkey: send-command(string pubkey, string user)
            gerrit:
              gerrit_public_ips: consume-signal(list<string>)
            jenkins:
              jenkins_public_ips: consume-signal(list<string>)
            ldap:
              ldap_public_ips: consume-signal(list<string>)
              ldap_private_ips: consume-signal(list<string>)
            sonar:
              sonar_public_ips: consume-signal(list<string>)
              sonar_private_ips: consume-signal(list<string>)
            jira:
              jira_public_ips: consume-signal(list<string>)
            nexus:
              nexus_public_ips: consume-signal(list<string>)
            selenium:
              remote-url: consume-signal(string)
              console-url: consume-signal(string)
            docker-registry:
              docker_registry_ip: consume-signal(string)
              docker_registry_private_ip: consume-signal(string)
              docker_registry_endpoint: consume-signal(string)
            selenium_hosts:
              hub: consume-signal(string)
            result:
              dashboard:
                type: publish-signal(string)
                name: Dashboard
          required:
            - gerrit
            - jenkins
            - ldap
            - selenium
            - sonar
            - jira
            - nexus
            - docker-vm
            - docker-vm-actions
            - docker-registry
          configuration:
            configuration.triggers: {}
            configuration.workflows:
              launch:
                steps:
                  - get_env_props:
                      action: getEnvironmentProperties
                      output:
                        environment: result

                  - init_gerrit_vm:
                      phase: init_component_vms
                      precedingPhases: [ get_env_props ]
                      action: .init_vm
                      parameters:
                        static_ips: "{$.environment.gerrit.gerrit_public_ips}"
                        role: gerrit

                  - init_jenkins_vm:
                      phase: init_component_vms
                      precedingPhases: [ get_env_props ]
                      action: .init_vm
                      parameters:
                        static_ips: "{$.environment.jenkins.jenkins_public_ips}"
                        role: jenkins

                  - init_ldap_vm:
                      phase: init_component_vms
                      precedingPhases: [ get_env_props ]
                      action: .init_vm
                      parameters:
                        static_ips: "{$.environment.ldap.ldap_public_ips}"
                        role: ldap

                  - init_sonar_vm:
                      phase: init_component_vms
                      precedingPhases: [ get_env_props ]
                      action: .init_vm
                      parameters:
                        static_ips: "{$.environment.sonar.sonar_public_ips}"
                        role: sonar

                  - init_jira_vm:
                      phase: init_component_vms
                      precedingPhases: [ get_env_props ]
                      action: .init_vm
                      parameters:
                        static_ips: "{$.environment.jira.jira_public_ips}"
                        role: jira

                  - init_nexus_vm:
                      phase: init_component_vms
                      precedingPhases: [ get_env_props ]
                      action: .init_vm
                      parameters:
                        static_ips: "{$.environment.nexus.nexus_public_ips}"
                        role: nexus

                  - ldap_export_users:
                      precedingPhases: [ init_component_vms ]
                      action: chefsolo
                      parameters:
                        roles: [ ldap ]
                        recipeUrl: "{$.cookbooks_url}"
                        runList: [ "recipe[cicd_infrastructure::openldap_new_users]" ]
                        version: "11.16.4"

                  - jenkins_setup:
                      precedingPhases: [ init_component_vms ]
                      action: chefsolo
                      parameters:
                        roles: [ jenkins ]
                        recipeUrl: "{$.cookbooks_url}"
                        runList:
                          - "recipe[cicd_infrastructure::integration_jenkins_description]"
                          - "recipe[cicd_infrastructure::integration_jenkins_gerrit]"
                          - "recipe[cicd_infrastructure::integration_jenkins_selenium]"
                          - "recipe[cicd_infrastructure::integration_jenkins_sonar]"
                          - "recipe[cicd_infrastructure::integration_jenkins_jira]"
                          - "recipe[cicd_infrastructure::integration_jenkins_nexus]"
                          - "recipe[cicd_infrastructure::integration_jenkins_qubell]"
                          - "recipe[cicd_infrastructure::integration_jenkins_ec2]"
                          - "recipe[cicd_infrastructure::integration_jenkins_mail]"
                        version: "11.16.4"
                        jattrs:
                          cicd_infrastructure:
                            jenkins:
                              docker:
                                registry: "{$.environment.docker-registry.docker_registry_endpoint}"
                              pubkey: ""
                              gerrit-trigger:
                                host: "{$.environment.gerrit.gerrit_public_ips[0]}"
                              nexus:
                                endpoint: "http://{$.environment.nexus.nexus_public_ips[0]}:8081/nexus"
                              selenium:
                                endpoint: "{$.environment.selenium.remote-url}"
                              qubell-plugin:
                                username: "{$.environment.properties.qubell_username}"
                                password: "{$.environment.properties.qubell_password}"
                              ec2:
                                accessId: "{$.environment.properties.amazon_access_id}"
                                secretKey: "{$.environment.properties.amazon_secret_key}"
                                region: "{$.environment.properties.amazon_region}"
                                instanceCap: "{$.environment.properties.amazon_instance_cap}"
                                keyPairName: "jenkins-slave-prod"
                                template:
                                  ami: "{$.environment.properties.amazon_instance_ami}"
                                  securityGroups: "{$.environment.properties.amazon_instance_security_groups}"
                                  type: "{$.environment.properties.amazon_instance_type}"
                                  zone: "{$.environment.properties.amazon_instance_zone}"
                              jira:
                                host: "{$.environment.jira.jira_public_ips[0]}"
                                username: "{$.environment.properties.jira_username}"
                                password: "{$.environment.properties.jira_password}"
                              sonar:
                                host: "{$.environment.sonar.sonar_public_ips[0]}"
                                private_ip: "{$.environment.sonar.sonar_private_ips[0]}"
                                username: "{$.environment.properties.jenkins_sonar_username}"
                                password: "{$.environment.properties.jenkins_sonar_password}"
                      output:
                        jenkins_host_state: chefState

                  - docker-deployment-setup:
                      phase: jenkins_docker
                      precedingPhases: [ jenkins_setup ]
                      action: docker-vm-actions.registrate_pubkey
                      parameters:
                        pubkey: "{$.jenkins_host_state.*.[0].cicd_infrastructure.jenkins.pubkey}"
                        user: "core"

                  - jenkins_docker_setup:
                      phase: jenkins_docker
                      precedingPhases: [ jenkins_setup ]
                      action: chefsolo
                      parameters:
                        roles: [ jenkins ]
                        recipeUrl: "{$.cookbooks_url}"
                        runList: [ "recipe[cicd_infrastructure::integration_jenkins_docker]" ]
                        version: "11.16.4"
                        jattrs:
                          cicd_infrastructure:
                            jenkins:
                              docker:
                                registry: "{$.environment.docker-registry.docker_registry_endpoint}"
                                docker-vm: "{$.environment.docker-vm.docker-vm_public_ips[0]}"

                  - gerrit_setup:
                      phase: gerrit_setup
                      precedingPhases: [ init_component_vms ]
                      action: chefsolo
                      parameters:
                        roles: [ gerrit ]
                        recipeUrl: "{$.cookbooks_url}"
                        runList:
                          - "recipe[cicd_infrastructure::integration_gerrit_projects]"
                          - "recipe[cicd_infrastructure::integration_gerrit_mail]"
                          - "recipe[cicd_infrastructure::integration_gerrit_gitweb]"
                        version: "11.16.4"

                  - gerrit_jenkins:
                      precedingPhases: [ gerrit_setup, jenkins_setup ]
                      action: chefsolo
                      parameters:
                        roles: [ gerrit ]
                        recipeUrl: "{$.cookbooks_url}"
                        runList: [ "recipe[cicd_infrastructure::integration_gerrit_jenkins]" ]
                        version: "11.16.4"
                        jattrs:
                          cicd_infrastructure:
                            gerrit:
                              jenkins_host: "{$.environment.jenkins.jenkins_public_ips[0]}"
                              jenkins_pubkey: "{$.jenkins_host_state.*.[0].cicd_infrastructure.jenkins.pubkey}"

                  - add_asf_jenkins_jobs_project:
                      precedingPhases: [ gerrit_jenkins ]
                      action: chefsolo
                      parameters:
                        roles: [ gerrit ]
                        recipeUrl: "{$.cookbooks_url}"
                        runList: [ "recipe[cicd_infrastructure::integration_gerrit_demojobs_project]" ]
                        version: "11.16.4"

                  - add_asf_jenkins_jobs_generator:
                      precedingPhases: [ add_asf_jenkins_jobs_project ]
                      action: chefsolo
                      parameters:
                        roles: [ jenkins ]
                        recipeUrl: "{$.cookbooks_url}"
                        runList: [ "recipe[cicd_infrastructure::integration_jenkins_jobs]" ]
                        version: "11.16.4"
                        jattrs:
                          cicd_infrastructure:
                            qubell_default_app_id: "{$.environment.properties.qubell_app_id}"
                            qubell_default_env_id: "{$.environment.properties.qubell_env_id}"
                            jenkins:
                              gerrit-trigger:
                                host: "{$.environment.gerrit.gerrit_public_ips[0]}"

                              nexus:
                                endpoint: "http://{$.environment.nexus.nexus_public_ips[0]}:8081/nexus"

                              jira:
                                host: "{$.environment.jira.jira_public_ips[0]}"

                  - sonar_setup:
                      precedingPhases: [ init_component_vms ]
                      action: chefsolo
                      parameters:
                        roles: [ sonar ]
                        recipeUrl: "{$.cookbooks_url}"
                        runList: [ "recipe[cicd_infrastructure::integration_sonar_mail]" ]
                        version: "11.16.4"
                        jattrs:
                          cicd_infrastructure:
                            sonar:
                              credentials:
                                username: "{$.environment.properties.admin_sonar_username}"
                                password: "{$.environment.properties.admin_sonar_password}"

                  - gerrit_ldap:
                      phase: ldap_integration
                      precedingPhases: [ ldap_export_users, add_asf_jenkins_jobs_generator ]
                      action: chefsolo
                      parameters:
                        roles: [ gerrit ]
                        recipeUrl: "{$.cookbooks_url}"
                        runList:
                          - "recipe[cicd_infrastructure::integration_gerrit_ldap]"
                          - "recipe[cicd_infrastructure::integration_gerrit_gitweb]"
                        version: "11.16.4"
                        jattrs:
                          cicd_infrastructure:
                            gerrit:
                              ldap:
                                server: "{$.environment.ldap.ldap_private_ips[0]}"

                  - jenkins_ldap:
                      phase: ldap_integration
                      precedingPhases: [ ldap_export_users, add_asf_jenkins_jobs_generator ]
                      action: chefsolo
                      parameters:
                        roles: [ jenkins ]
                        recipeUrl: "{$.cookbooks_url}"
                        runList: [ "recipe[cicd_infrastructure::integration_jenkins_ldap]" ]
                        version: "11.16.4"
                        jattrs:
                          cicd_infrastructure:
                            jenkins:
                              ldap:
                                server: "{$.environment.ldap.ldap_private_ips[0]}"

                  - sonar_ldap:
                      phase: ldap_integration
                      precedingPhases: [ ldap_export_users, add_asf_jenkins_jobs_generator ]
                      action: chefsolo
                      parameters:
                        roles: [ sonar ]
                        recipeUrl: "{$.cookbooks_url}"
                        runList: [ "recipe[cicd_infrastructure::integration_sonar_ldap]" ]
                        version: "11.16.4"
                        jattrs:
                          cicd_infrastructure:
                            sonar:
                              ldap:
                                server: "{$.environment.ldap.ldap_private_ips[0]}"

                  - jira_ldap:
                      phase: ldap_integration
                      precedingPhases: [ ldap_export_users, add_asf_jenkins_jobs_generator ]
                      action: chefsolo
                      parameters:
                        roles: [ jira ]
                        recipeUrl: "{$.cookbooks_url}"
                        runList: [ "recipe[cicd_infrastructure::integration_jira_ldap]" ]
                        version: "11.16.4"
                        jattrs:
                          cicd_infrastructure:
                            jira:
                              ldap:
                                server: "{$.environment.ldap.ldap_private_ips[0]}"

                  - nexus_ldap:
                      phase: ldap_integration
                      precedingPhases: [ ldap_export_users, add_asf_jenkins_jobs_generator ]
                      action: chefsolo
                      parameters:
                        roles: [ nexus ]
                        recipeUrl: "{$.cookbooks_url}"
                        runList: [ "recipe[cicd_infrastructure::integration_nexus_ldap]" ]
                        version: "11.16.4"
                        jattrs:
                          cicd_infrastructure:
                            nexus:
                              ldap:
                                server: "{$.environment.ldap.ldap_private_ips[0]}"

                  - dashboard:
                      precedingPhases: [ ldap_export_users ]
                      action: chefsolo
                      parameters:
                        roles: [ ldap ]
                        recipeUrl: "{$.cookbooks_url}"
                        runList: [ "recipe[cicd_infrastructure::dashboard]" ]
                        version: "11.16.4"
                        jattrs:
                          cicd_infrastructure:
                            dashboard:
                              services:
                                jenkins:
                                  ip: "{$.environment.jenkins.jenkins_public_ips[0]}"
                                  endpoint: "http://{$.environment.jenkins.jenkins_public_ips[0]}:8080"
                                gerrit:
                                  ip: "{$.environment.gerrit.gerrit_public_ips[0]}"
                                  endpoint: "http://{$.environment.gerrit.gerrit_public_ips[0]}"
                                jira:
                                  ip: "{$.environment.jira.jira_public_ips[0]}"
                                  endpoint: "https://{$.environment.jira.jira_public_ips[0]}"
                                nexus:
                                  ip: "{$.environment.nexus.nexus_public_ips[0]}"
                                  endpoint: "http://{$.environment.nexus.nexus_public_ips[0]}:8081/nexus"
                                selenium:
                                  ip: "{$.environment.selenium_hosts.hub}"
                                  endpoint: "{$.environment.selenium.console-url}"
                                sonar:
                                  ip: "{$.environment.sonar.sonar_public_ips[0]}"
                                  endpoint: "http://{$.environment.sonar.sonar_public_ips[0]}:9000"
                                ldap:
                                  ip: "{$.environment.ldap.ldap_private_ips[0]}"
                                  endpoint: "http://{$.environment.ldap.ldap_public_ips[0]}/phpldapadmin"
                return:
                  dashboard:
                    value: "http://{$.environment.ldap.ldap_public_ips[0]}/dashboard"

              .init_vm:
                parameters:
                  - role:
                      default: undefined
                  - static_ips:
                      default: undefined
                steps:
                  - initialization:
                      action: provisionVms
                      parameters:
                        hardwareId: m3.medium
                        imageId: us-east-1/ami-b028aad8
                        jcloudsProvider: aws-ec2
                        jcloudsEndpoint: https://ec2.us-east-1.amazonaws.com
                        roleName: "{$.role}"
                        vmIdentity: ec2-user
                        staticIps: "{$.static_ips}"

              destroy:
                steps:
                  - destroy:
                      action: undeployEnv
