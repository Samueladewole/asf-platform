# Encoding: utf-8
#
# Application: Agile Software Factory
# Component: swarm
#
# Copyright (c) 2015 Grid Dynamics International, Inc. All Rights Reserved
# Classification level: Public
# Licensed under the Apache License, Version 2.0.
#

application:
  configuration:
    input.storage_size: 20
    input.nodes_count: 2
    input.manager_port: 20375
  interfaces:
    input:
      "*": "bind(swarm#input.*)"
    result:
      "*": "bind(swarm#result.*)"
    swarm-actions:
      "*": "bind(swarm#actions.*)"
    # docker-registry:
    #   "*": "bind(swarm#registry.*)"
  bindings:
    - [registry, swarm]
  components:
    registry:
      type: workflow.Instance
      interfaces:
        result:
          docker_registry_ip:         "publish-signal(string)"
          docker_registry_private_ip: "publish-signal(string)"
          docker_registry_endpoint:   "publish-signal(string)"
      configuration:
        configuration.workflows:
          launch:
            steps: []
            return:
              docker_registry_ip:
                value: "1.2.3.4"
              docker_registry_private_ip:
                value: "4.3.2.1"
              docker_registry_endpoint:
                value: "1.2.3.4:5000"
    swarm:
      type: workflow.Instance
      required:
        - registry
      interfaces:
        input:
          storage_size:
            type: "configuration(int)"
            name: "Storage size"
          nodes_count:
            type: "configuration(int)"
            name: "Nodes count"
          manager_port:
            type: "configuration(int)"
            name: "Swarm manager port"
        actions:
          registrate_pubkey:
            type: "receive-command(string pubkey, string user)"
            name: "Add Public Key"
          provision_swarm_nodes:
            type: "receive-command(string instance_size, int count, string cluster_token => string swarm_nodes_list)"
            name: "Add nodes"
        result:
          swarm_manager_public_ip:
            type: "publish-signal(string)"
            name: "Swarm Manager IP"
          swarm_nodes_list:
            type: "publish-signal(list<string>)"
            name: "Swarm Nodes"
          swarm_cluster_token:
            type: "publish-signal(string)"
            name: "Swarm Cluster Token"
          swarm_manager_endpoint:
            type: "publish-signal(string)"
            name: "Swarm Maneger Endpoint"
        registry:
          docker_registry_ip: "consume-signal(string)"
          docker_registry_private_ip: "consume-signal(string)"
          docker_registry_endpoint: "consume-signal(string)"
      configuration:
        configuration.triggers: {}
        configuration.workflows:
          launch:
            steps:
              - provision_manager:
                  action: .provision_swarm_manager
                  parameters:
                    instance_size: "m1.small"
                    manager_port: "{$.manager_port}"
                  output:
                    cluster_token: cluster_token
                    manager_public_ips: manager_public_ips
                    manager_private_ips: manager_private_ips

              - provision_nodes:
                  action: provision_swarm_nodes
                  precedingPhases: [ "provision_manager" ]
                  parameters:
                    cluster_token: "{$.cluster_token}"
                    instance_size: "m1.small"
                    count: "{$.nodes_count}"
                  output:
                    swarm_nodes_list: swarm_nodes_list
            return:
              swarm_manager_public_ip:
                value: "{$.manager_public_ips}"
              swarm_nodes_list:
                value: "{$.swarm_nodes_list}"
              swarm_cluster_token:
                value: "{$.cluster_token}"
              swarm_manager_endpoint:
                value: "tcp://{$.manager_public_ips}:{$.manager_port}"

          registrate_pubkey:
            parameters:
              pubkey:
                description: "SSH Public Key"
                default: undefined
              user:
                description: "User"
                default: "coreos"
            steps:
              - registration:
                  action: "execrun"
                  parameters:
                    roles: [ "swarm_node", "swarm_manager" ]
                    isSudo: true
                    command:
                      - |
                          echo "{$.pubkey}" | sudo -u "{$.user}" sh -c "cat >> ~/.ssh/authorized_keys.d/coreos-cloudinit"
                          /usr/bin/update-ssh-keys
          destroy:
            steps:
                - destroy:
                    action: undeployEnv

          .provision_swarm_manager:
            parameters:
              instance_size:
                description: "Instance size"
                default: "m1.small"
              manager_port:
                description: "Manager port"
                default: 20375
            steps:
              - provision:
                  action: .provision_swarm_common
                  parameters:
                    role: "swarm_manager"
                    instance_size: "{$.instance_size}"
                    count: 1
                  output:
                    private_ips: private_ips
                    public_ips: public_ips

              - create_cluster:
                  action: execrun
                  precedingPhases: [ "provision" ]
                  parameters:
                    roles: [ "swarm_manager" ]
                    command:
                      - |
                          docker run --rm swarm create
                  output:
                    token: stdout

              - add_to_cluster:
                  action: execrun
                  precedingPhases: [ "create_cluster" ]
                  parameters:
                    roles: [ "swarm_manager" ]
                    command:
                      - |
                          IP=$$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
                          docker run -d swarm join --addr=$${{IP}}:2375 token://{$.token.*[0]}

              - start_manager:
                  action: execrun
                  precedingPhases: [ "create_cluster" ]
                  parameters:
                    roles: [ "swarm_manager" ]
                    command:
                      - |
                          docker run -d -p {$.manager_port}:2375 swarm manage token://{$.token.*[0]}
            return:
              cluster_token:
                value: "{$.token.*[0]}"
              manager_public_ips:
                value: "{$.public_ips[0]}"
              manager_private_ips:
                value: "{$.private_ips[0]}"

          provision_swarm_nodes:
            parameters:
              instance_size:
                description: "Instance size"
                default: "m1.small"
              count:
                description: "Node count"
                default: 1
              cluster_token:
                description: "Cluster token"
                default: undefined
            steps:
              - provision:
                  action: .provision_swarm_common
                  parameters:
                    role: "swarm_node"
                    instance_size: "{$.instance_size}"
                    count: "{$.count}"

              - add_to_cluster:
                  action: execrun
                  precedingPhases: [ "provision" ]
                  parameters:
                    roles: [ "swarm_node" ]
                    command:
                      - |
                          IP=$$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
                          docker run -d swarm join --addr=$${{IP}}:2375 token://{$.cluster_token}

              - get_nodes_list:
                  action: execrun
                  precedingPhases: [ "provision" ]
                  parameters:
                    roles: [ "swarm_manager" ]
                    command:
                      - |
                          docker run --rm swarm list token://{$.cluster_token}
                  output:
                    nodes_list: stdout
            return:
              swarm_nodes_list:
                value: "{$.nodes_list.*}"

          .provision_swarm_common:
            parameters:
              role:
                description: "Role name"
                default: "swarm"
              instance_size:
                description: "Instance size"
                default: "m1.small"
              count:
                description: "Node count"
                default: 1
            steps:
              - "env-props": &env-props
                  action: getSignals
                  output:
                    config: result

              - provision:
                  action: provisionVms
                  precedingPhases: [ "env-props" ]
                  parameters:
                    roleName: "{$.role}"
                    hardwareId: "{$.instance_size}"
                    quantity: "{$.count}"
                    retryCount: 1
                    jcloudsProvider: aws-ec2
                    jcloudsEndpoint: https://ec2.us-east-1.amazonaws.com
                    jcloudsRegions: us-east-1
                    jcloudsNodeNamePrefix: swarm
                    vmIdentity: core
                    imageId: us-east-1/ami-5e9bd836
                    ec2SecurityGroup: default
                    providerSettings:
                      userData: |
                        #cloud-config
                        write_files:
                          - path: /etc/systemd/system/docker.service.d/50-insecure-registry.conf
                            content: |
                                [Service]
                                Environment=DOCKER_OPTS='--insecure-registry={$.config.registry.docker_registry_private_ip}:5000 --registry-mirror="{$.config.registry.docker_registry_endpoint}"'
                        coreos:
                          units:
                            - name: docker-tcp.socket
                              command: start
                              enable: true
                              content: |
                                [Unit]
                                Description=Docker Socket for the API
                                [Socket]
                                ListenStream=2375
                                BindIPv6Only=both
                                Service=docker.service
                                [Install]
                                WantedBy=sockets.target
                    blockDeviceMapping:
                      "/dev/sda1":
                        ebs:
                          volumeSize: "{$.storage_size}"
                  output:
                    public_ips: ips
                    private_ips: privateips

              - pull_swarm:
                  action: execrun
                  precedingPhases: [ "provision" ]
                  parameters:
                    roles: [ "{$.role}" ]
                    command:
                      - |
                          docker pull swarm
            return:
              public_ips:
                value: "{$.public_ips}"
              private_ips:
                value: "{$.private_ips}"
