//NOTE: project_name is parameter of seed job it's available as variable in dsl scope
maven_installation = 'Maven-default'
groovy_installation = 'Groovy-default'
git_url = "ssh://jenkins@<%= @gerrit_host %>:<%= @gerrit_port %>/${project_name}"
version_props_generate = """
  def binaryVersion(env, version) {
      def buildTime = Date.parse('yyyy-MM-dd_HH-mm-ss', env['BUILD_ID'])
      def timestamp = buildTime.format('yyyyMMdd.HHmmss', TimeZone.getTimeZone('UTC'))
      def buildNo = env['BUILD_NUMBER']
      version.replaceFirst(/-SNAPSHOT\$/, \"-\${timestamp}-\${buildNo}\")
  }

  def env = System.getenv()
  def p = new Properties()

  def pom = new XmlParser().parse('pom.xml')

  p['projectGroupId'] = 'org.asf.demo.webapp'
  p['projectArtifactId'] = 'asf-webapp-demo'
  p['projectVersion'] = pom.version.text() ?: '1.0.0-SNAPSHOT'

  p['buildGroupId'] = p['projectGroupId']
  p['buildArtifactId'] = p['projectArtifactId']
  p['buildVersion'] = binaryVersion(env, p['projectVersion'])
  p['buildJob'] = env['JOB_NAME']
  p['buildNumber'] = env['BUILD_NUMBER']
  p['buildBranch'] = env['GIT_BRANCH'].replaceFirst('^[^/]+/', '')
  p['buildCommit'] = env['GIT_COMMIT']

  p.store(new FileWriter('version.properties'), env['BUILD_TAG'])
"""

set_version = """def version = build.getEnvironment(null)['buildVersion']
if (version) build.displayName = version"""

qubell_app_params = """{
    \"input.artifact_url\": \"\${NEXUS_URL}/service/local/artifact/maven/content?r=builds-all&g=com.griddynamics.asf.webapp-demo&a=spring-petclinic&v=\${buildVersion}&e=war\",
    \"instanceName\": \"asf-webapp-demo-\${buildVersion}\"
}"""

folder {
    name "${project_name}"
    description("<a href='http://<%= @gerrit_host %>'> Gerrit</a>, <a href='http://<%= @jira_host %>'> JIRA</a>")
}

job(type: Maven) {
  name "${project_name}/dev-build-review"
  description("<p>This job builds code and run unit tests. Triggered by Gerrit review action. Source code: <code>${git_url}</code></p>")
  jdk('/usr/lib/jvm/java/')
  parameters {
    stringParam("GERRIT_PROJECT", "${project_name}", "Gerrit project name")
    stringParam("GERRIT_BRANCH", "dev", "Gerrit branch")
    stringParam("GERRIT_REFSPEC", "refs/heads/dev", "Gerrit refspec")
  }
  configure { project ->
    project << globalSettings(
      class:'org.jenkinsci.plugins.configfiles.maven.job.MvnGlobalSettingsProvider',
      plugin:'config-file-provider@<%= @plugins['config-file-provider'] %>') {
        settingsConfigId('<%= @settings_id %>')
      }
  }
  scm {
    git {
      remote {
        name('origin')
        url(git_url)
        refspec('\${GERRIT_REFSPEC}')
      }
      branch('*/\${GERRIT_BRANCH}')
    }
  }
  triggers {
    gerrit {
      events {
        PatchsetCreated
        DraftPublished
      }
      project("${project_name}", "dev")
    }
  }
  logRotator(30, 50, -1, -1)
  concurrentBuild(true)
  goals('-e')
  goals('clean')
  goals('install')
  mavenInstallation(maven_installation)
  localRepository(LocalToWorkspace)
  publishers{
    mailer("", false, true)
  }
  configure { project ->
    project / publishers << "hudson.plugins.jira.JiraIssueUpdater"(plugin:"jira@<%= @plugins['jira'] %>")
  }
  perModuleEmail(false)
}

job(type: Maven) {
  name "${project_name}/dev-build"
  description("<p>This job builds code published to dev branch and run unit tests, triggered job with functional test. Source code: <code>${git_url}</code></p>")
  jdk('/usr/lib/jvm/java/')
  configure { project ->
    project << globalSettings(
      class:'org.jenkinsci.plugins.configfiles.maven.job.MvnGlobalSettingsProvider',
      plugin:"config-file-provider@<%= @plugins['config-file-provider'] %>") {
        settingsConfigId('<%= @settings_id %>')
      }
  }
  scm {
    git {
      remote {
        name('origin')
        url(git_url)
        refspec('+refs/heads/dev:refs/remotes/origin/dev')
      }
      branch('*/dev')
    }
  }
  triggers {
    gerrit {
      events {
        RefUpdated
      }
      project("${project_name}", 'plain:dev')
    }
  }
  preBuildSteps {
    groovyCommand(version_props_generate, groovy_installation)
    environmentVariables {
        propertiesFile('version.properties')
    }
    maven {
      goals('versions:set -DnewVersion=\${buildVersion}')
      mavenInstallation(maven_installation)
      localRepository(LocalToWorkspace)
    }
  }
  logRotator(30, 50, -1, -1)
  goals('-e')
  goals('clean')
  goals('deploy -P build')
  mavenInstallation(maven_installation)
  localRepository(LocalToWorkspace)
  publishers{
    mailer("", false, true)
    archiveArtifacts 'version.properties'
    downstreamParameterized {
      trigger('functional-tests') {
        currentBuild()
        propertiesFile('version.properties')
      }
    }
  }
  configure { project ->
    project / publishers << "hudson.plugins.jira.JiraIssueUpdater"(plugin:"jira@<%= @plugins['jira'] %>")
  }
}

job() {
    description("<p>This job requested Qubell deployment ${project_name}, triggered job with an integration tests, destroyed application in Qubell.</p>")
    jdk('/usr/lib/jvm/java/')
    parameters {
      stringParam('QUBELL_APP_ID', '53eb65e9e4b0f24b4a52c0f2', 'Qubell Application ID')
      stringParam('QUBELL_ENV_ID', '53f5d94ce4b0b03d045f7a13', 'Qubell Env ID')
    }
    logRotator(30, 50, -1, -1)
    steps {
    configure { 
        it / builders << "hudson.plugins.copyartifact.CopyArtifact"(
        plugin: "copyartifact@1.31") {
            project("functional-tests")
            filter("version.properties")
            target()
            excludes()
            selector(class: "hudson.plugins.copyartifact.StatusBuildSelector")
            downstreamParameterized()            
        }
    }
    configure { project ->
        project / builders << "EnvInjectBuilder"(
        plugin: "envinject@1.90") {
            info() {
                propertiesFilePath("version.properties")
            }            
        }
    }
    configure { project ->
        project / builders << "com.qubell.jenkinsci.plugins.qubell.builders.StartInstanceBuilder"(
            plugin: "qubell@2.5") {
            expectedStatus('RUNNING')
            timeout('1200')
            outputFilePath('qubell_output.json')
            manifestRelativePath('')
            environmentId('\${QUBELL_ENV_ID}')
            applicationId('\${QUBELL_APP_ID}')
            extraParameters(qubell_app_params)
          }
    }
    configure { // It's hack because for some reasone DSL does not add qubell plugin into job
	    it / builders << "hudson.plugins.groovy.Groovy"(plugin: "groovy@1.22") {
		    scriptSource(class : "hudson.plugins.groovy.StringScriptSource") {
			    command """
import groovy.json.JsonSlurper;
import hudson.model.*;

def build = Thread.currentThread().executable;
def envVarsMap = build.parent.builds[0].properties.get("envVars")

def qubellOutputFile = new File("\${envVarsMap.get('WORKSPACE')}/qubell_output.json")
def userJson = new JsonSlurper().parseText(qubellOutputFile.text)

def p = new Properties()

p["PETCLINIC_URL"] = userJson.returnValues.'output.webapp_endpoint'
p.store(new FileWriter('petclinic_url.properties'), null)
"""
        }
        groovyName("Groovy-default")
      }
    }
    configure { project ->
        project / builders << "EnvInjectBuilder"(
        plugin: "envinject@1.90") {
            info() {
                propertiesFilePath("petclinic_url.properties")
            }            
        }
    }

    configure {
        it / builders << "hudson.plugins.parameterizedtrigger.TriggerBuilder"(plugin:"parameterized-trigger@2.25") {
            configs{
                    "hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig" {
                        projects("integration-tests")
                        condition("UNSTABLE_OR_BETTER")
                        triggerWithNoParameters(false)
                        buildAllNodesWithLabel(false)
                    configs {
                        "hudson.plugins.parameterizedtrigger.PredefinedBuildParameters" {
                        properties("buildCommit=\${buildCommit}\nPETCLINIC_URL=\${PETCLINIC_URL}")
                        }
                    }
                    block{
                        buildStepFailureThreshold {
                            name("FAILURE")
                            ordinal(2)
                            color("RED")
                        }
                        failureThreshold {
                            name("FAILURE")
                            ordinal(2)
                            color("RED")
                        }
                        unstableThreshold {
                            name("UNSTABLE")
                            ordinal(1)
                            color("YELLOW")
                        }
                    }
                }
            }
        }
    }

  configure { project ->
    project / builders << "com.qubell.jenkinsci.plugins.qubell.builders.DestroyInstanceBuilder"(
      plugin: "qubell@2.5") {
  	    expectedStatus('DESTROYED')
        timeout('600')
        commandName('destroy')
      }
  }
  
  publishers{
    mailer("", false, true)
  }
  
  configure { project ->
    project / publishers << "hudson.plugins.jira.JiraIssueUpdater"(plugin:"jira@<%= @plugins['jira'] %>")
  }
}
    // Workaround because dsl plugin bind function into context
    configure { project ->
        name ("${project_name}/deploy-integration-tests")
    }
}

job(type: Maven) {
  name "${project_name}/fb-build"
  description("<p>This job builds feature branch code, run unit tests and triggered job with functional tests. Source code: <code>${git_url}</code></p>")
  jdk("/usr/lib/jvm/java/")
  configure { project ->
    project << globalSettings(class:'org.jenkinsci.plugins.configfiles.maven.job.MvnGlobalSettingsProvider', plugin:'config-file-provider@<%= @plugins['config-file-provider'] %>') {
      settingsConfigId('<%= @settings_id %>')
    }
  }
  scm {
    git {
      remote {
        name('origin')
        url(git_url)
      }
      branch('*/fb-*')
    }
  }
  triggers {
    gerrit {
      events {
        RefUpdated
      }
      project("${project_name}", "ant:fb-*")
    }
  }

  preBuildSteps {
    groovyCommand(version_props_generate, groovy_installation)
    environmentVariables {
        propertiesFile('version.properties')
    }
    maven {
        goals('versions:set -DnewVersion=\${buildVersion}')
        mavenInstallation(maven_installation)
        localRepository(LocalToWorkspace)
    }
  }
  concurrentBuild(true)
  logRotator(30, 50, -1, -1)
  goals('-e')
  goals('clean')
  goals('deploy -P build-fb')
  mavenInstallation(maven_installation)
  localRepository(LocalToWorkspace)

  publishers{
    mailer("", false, true)
    archiveArtifacts 'version.properties'
    downstreamParameterized {
      trigger('fb-functional-tests') {
        currentBuild()
        propertiesFile('version.properties')
      }
    }
  }
  configure { project ->
    project / publishers << "hudson.plugins.jira.JiraIssueUpdater"(plugin:"jira@<%= @plugins['jira'] %>")
  }
}

job(type: Maven) {
  name "${project_name}/fb-functional-tests"
  description("<p>This job run functional tests on feature branch code.</p>")
  jdk("/usr/lib/jvm/java/")
  configure { project ->
    project << globalSettings(class:'org.jenkinsci.plugins.configfiles.maven.job.MvnGlobalSettingsProvider', plugin:'config-file-provider@<%= @plugins['config-file-provider'] %>') {
      settingsConfigId('<%= @settings_id %>')
    }
  }
  scm {
    git {
      remote {
        name('origin')
        url(git_url)
      }
      branch('\${buildCommit}')
    }
  }
  preBuildSteps {
    copyArtifacts('fb-build', targetPath = 'version.properties') {
        upstreamBuild(true)
    }
  }
  rootPOM("spring-petclinic-test/pom.xml")
  goals('-P functional-test,build clean verify -Dpetclinic.version=${buildVersion}')
  mavenInstallation(maven_installation)
  localRepository(LocalToWorkspace)
  configure { project ->
    project << globalSettings(
      class:'org.jenkinsci.plugins.configfiles.maven.job.MvnGlobalSettingsProvider',
      plugin:"config-file-provider@<%= @plugins['config-file-provider'] %>") {
        settingsConfigId('<%= @settings_id %>')
      }
  }
  postBuildSteps {
    publishers{
      mailer("", false, true)
      publishHtml{report("spring-petclinic-test/target/jbehave/view","HTML Report",'index.html',false)}
      archiveXUnit {
          failedThresholds {
          unstable 0
          unstableNew 0
          failure 0
          failureNew 0
        }
        skippedThresholds {
          unstable 0
          unstableNew 0
          failure 0
          failureNew 0
        }
        thresholdMode ThresholdMode.NUMBER
        timeMargin 4000
      }
    }
  }
  configure { project ->
    project / publishers / xunit / types << "JBehavePluginType"(plugin="jbehave-jenkins-plugin@3.7")
  }
  configure { project ->
    project / publishers / xunit / types / JBehavePluginType / pattern << "spring-petclinic-test/target/jbehave/*.xml"
  }
  configure { project ->
    project / publishers << "hudson.plugins.jira.JiraIssueUpdater"(plugin:"jira@<%= @plugins['jira'] %>")
  }
}
job(type: Maven) {
  name "${project_name}/integration-tests"
  description("<p>This job run integration tests on dev branch code.</p>")
  jdk("/usr/lib/jvm/java/")
  configure { project ->
    project << globalSettings(class:'org.jenkinsci.plugins.configfiles.maven.job.MvnGlobalSettingsProvider', plugin:'config-file-provider@<%= @plugins['config-file-provider'] %>') {
      settingsConfigId('<%= @settings_id %>')
    }
  }
  scm {
    git {
      remote {
        name('origin')
        url(git_url)
      }
      branch('\${buildCommit}')
    }
  }

  rootPOM("spring-petclinic-test/pom.xml")
  goals('-P integration-test clean verify -Dspring.profiles.active=remote -DREMOTE_WEBDRIVER_URL=${SELENIUM_URL} -Dbrowser.version= -Dpetclinic.url=${PETCLINIC_URL}')
  mavenInstallation(maven_installation)
  localRepository(LocalToWorkspace)
  configure { project ->
      project << globalSettings(
      class:'org.jenkinsci.plugins.configfiles.maven.job.MvnGlobalSettingsProvider',
      plugin:"config-file-provider@<%= @plugins['config-file-provider'] %>") {
          settingsConfigId('<%= @settings_id %>')
        }
  }
  postBuildSteps {
    publishers{
      mailer("", false, true)
      publishHtml{report("spring-petclinic-test/target/jbehave/view","HTML Report",'index.html',false)}
      archiveXUnit {
        failedThresholds {
          unstable 0
          unstableNew 0
          failure 0
          failureNew 0
        }
        skippedThresholds {
          unstable 0
          unstableNew 0
          failure 0
          failureNew 0
        }
        thresholdMode ThresholdMode.NUMBER
        timeMargin 4000
      }
    }
  }
  configure { project ->
    project / publishers / xunit / types << "JBehavePluginType"(plugin="jbehave-jenkins-plugin@3.7")
  }
  configure { project ->
    project / publishers / xunit / types / JBehavePluginType / pattern << "spring-petclinic-test/target/jbehave/*.xml"
  }
  configure { project ->
    project / publishers << "hudson.plugins.jira.JiraIssueUpdater"(plugin:"jira@<%= @plugins['jira'] %>")
  }
}

job(type: Maven) {
  name "${project_name}/functional-tests"
  description("<p>This job run functional test on dev branch code and triggered deployment application in Qubell</p>")
  jdk("/usr/lib/jvm/java/")
  configure { project ->
    project << globalSettings(class:'org.jenkinsci.plugins.configfiles.maven.job.MvnGlobalSettingsProvider', plugin:'config-file-provider@<%= @plugins['config-file-provider'] %>') {
      settingsConfigId('<%= @settings_id %>')
    }
  }
  scm {
    git {
      remote {
        name('origin')
        url(git_url)
      }
      branch('\${buildCommit}')
    }
  }
  preBuildSteps {
    copyArtifacts('dev-build', targetPath = 'version.properties') {
        upstreamBuild(true)
    }
  }
  rootPOM("spring-petclinic-test/pom.xml")
  goals('-P functional-test,build clean verify -Dpetclinic.version=${buildVersion}')
  mavenInstallation(maven_installation)
  localRepository(LocalToWorkspace)
  configure { project ->
    project << globalSettings(
      class:'org.jenkinsci.plugins.configfiles.maven.job.MvnGlobalSettingsProvider',
      plugin:"config-file-provider@<%= @plugins['config-file-provider'] %>") {
        settingsConfigId('<%= @settings_id %>')
      }
  }
  publishers{
    mailer("", false, true)
    archiveArtifacts 'version.properties'
    publishHtml{report("spring-petclinic-test/target/jbehave/view","HTML Report",'index.html',false)}
    archiveXUnit {
      failedThresholds {
        unstable 0
        unstableNew 0
        failure 0
        failureNew 0
      }
      skippedThresholds {
        unstable 0
        unstableNew 0
        failure 0
        failureNew 0
      }
      thresholdMode ThresholdMode.NUMBER
      timeMargin 4000
    }
    downstreamParameterized {
      trigger('deploy-integration-tests')
    }
  }
  configure { project ->
    project / publishers / xunit / types << "JBehavePluginType"(plugin="jbehave-jenkins-plugin@3.7")
  }
  configure { project ->
    project / publishers / xunit / types / JBehavePluginType / pattern << "spring-petclinic-test/target/jbehave/*.xml"
    }
  configure { project ->
    project / publishers << "hudson.plugins.jira.JiraIssueUpdater"(plugin:"jira@<%= @plugins['jira'] %>")
  }
}
